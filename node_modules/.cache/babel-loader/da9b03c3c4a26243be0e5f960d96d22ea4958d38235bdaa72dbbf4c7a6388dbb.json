{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MaxMessageSizeFilterFactory = exports.MaxMessageSizeFilter = void 0;\nconst filter_1 = require(\"./filter\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nclass MaxMessageSizeFilter extends filter_1.BaseFilter {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n    this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n    if ('grpc.max_send_message_length' in options) {\n      this.maxSendMessageSize = options['grpc.max_send_message_length'];\n    }\n    if ('grpc.max_receive_message_length' in options) {\n      this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n    }\n  }\n  async sendMessage(message) {\n    /* A configured size of -1 means that there is no limit, so skip the check\n     * entirely */\n    if (this.maxSendMessageSize === -1) {\n      return message;\n    } else {\n      const concreteMessage = await message;\n      if (concreteMessage.message.length > this.maxSendMessageSize) {\n        throw {\n          code: constants_1.Status.RESOURCE_EXHAUSTED,\n          details: `Sent message larger than max (${concreteMessage.message.length} vs. ${this.maxSendMessageSize})`,\n          metadata: new metadata_1.Metadata()\n        };\n      } else {\n        return concreteMessage;\n      }\n    }\n  }\n  async receiveMessage(message) {\n    /* A configured size of -1 means that there is no limit, so skip the check\n     * entirely */\n    if (this.maxReceiveMessageSize === -1) {\n      return message;\n    } else {\n      const concreteMessage = await message;\n      if (concreteMessage.length > this.maxReceiveMessageSize) {\n        throw {\n          code: constants_1.Status.RESOURCE_EXHAUSTED,\n          details: `Received message larger than max (${concreteMessage.length} vs. ${this.maxReceiveMessageSize})`,\n          metadata: new metadata_1.Metadata()\n        };\n      } else {\n        return concreteMessage;\n      }\n    }\n  }\n}\nexports.MaxMessageSizeFilter = MaxMessageSizeFilter;\nclass MaxMessageSizeFilterFactory {\n  constructor(options) {\n    this.options = options;\n  }\n  createFilter() {\n    return new MaxMessageSizeFilter(this.options);\n  }\n}\nexports.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory;","map":{"version":3,"names":["filter_1","require","constants_1","metadata_1","MaxMessageSizeFilter","BaseFilter","constructor","options","maxSendMessageSize","DEFAULT_MAX_SEND_MESSAGE_LENGTH","maxReceiveMessageSize","DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH","sendMessage","message","concreteMessage","length","code","Status","RESOURCE_EXHAUSTED","details","metadata","Metadata","receiveMessage","exports","MaxMessageSizeFilterFactory","createFilter"],"sources":["/Users/usmanchaudhry/Documents/GitHub/weather-app/face-recognition/node_modules/@grpc/grpc-js/src/max-message-size-filter.ts"],"sourcesContent":["/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { BaseFilter, Filter, FilterFactory } from './filter';\nimport { WriteObject } from './call-interface';\nimport {\n  Status,\n  DEFAULT_MAX_SEND_MESSAGE_LENGTH,\n  DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH,\n} from './constants';\nimport { ChannelOptions } from './channel-options';\nimport { Metadata } from './metadata';\n\nexport class MaxMessageSizeFilter extends BaseFilter implements Filter {\n  private maxSendMessageSize: number = DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n  private maxReceiveMessageSize: number = DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n  constructor(\n    private readonly options: ChannelOptions\n  ) {\n    super();\n    if ('grpc.max_send_message_length' in options) {\n      this.maxSendMessageSize = options['grpc.max_send_message_length']!;\n    }\n    if ('grpc.max_receive_message_length' in options) {\n      this.maxReceiveMessageSize = options['grpc.max_receive_message_length']!;\n    }\n  }\n\n  async sendMessage(message: Promise<WriteObject>): Promise<WriteObject> {\n    /* A configured size of -1 means that there is no limit, so skip the check\n     * entirely */\n    if (this.maxSendMessageSize === -1) {\n      return message;\n    } else {\n      const concreteMessage = await message;\n      if (concreteMessage.message.length > this.maxSendMessageSize) {\n        throw {\n          code: Status.RESOURCE_EXHAUSTED,\n          details: `Sent message larger than max (${concreteMessage.message.length} vs. ${this.maxSendMessageSize})`,\n          metadata: new Metadata()\n        };\n      } else {\n        return concreteMessage;\n      }\n    }\n  }\n\n  async receiveMessage(message: Promise<Buffer>): Promise<Buffer> {\n    /* A configured size of -1 means that there is no limit, so skip the check\n     * entirely */\n    if (this.maxReceiveMessageSize === -1) {\n      return message;\n    } else {\n      const concreteMessage = await message;\n      if (concreteMessage.length > this.maxReceiveMessageSize) {\n        throw {\n          code: Status.RESOURCE_EXHAUSTED,\n          details: `Received message larger than max (${concreteMessage.length} vs. ${this.maxReceiveMessageSize})`,\n          metadata: new Metadata()\n        };\n      } else {\n        return concreteMessage;\n      }\n    }\n  }\n}\n\nexport class MaxMessageSizeFilterFactory\n  implements FilterFactory<MaxMessageSizeFilter> {\n  constructor(private readonly options: ChannelOptions) {}\n\n  createFilter(): MaxMessageSizeFilter {\n    return new MaxMessageSizeFilter(this.options);\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAiBA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,WAAA,GAAAD,OAAA;AAMA,MAAAE,UAAA,GAAAF,OAAA;AAEA,MAAaG,oBAAqB,SAAQJ,QAAA,CAAAK,UAAU;EAGlDC,YACmBC,OAAuB;IAExC,KAAK,EAAE;IAFU,KAAAA,OAAO,GAAPA,OAAO;IAHlB,KAAAC,kBAAkB,GAAWN,WAAA,CAAAO,+BAA+B;IAC5D,KAAAC,qBAAqB,GAAWR,WAAA,CAAAS,kCAAkC;IAKxE,IAAI,8BAA8B,IAAIJ,OAAO,EAAE;MAC7C,IAAI,CAACC,kBAAkB,GAAGD,OAAO,CAAC,8BAA8B,CAAE;;IAEpE,IAAI,iCAAiC,IAAIA,OAAO,EAAE;MAChD,IAAI,CAACG,qBAAqB,GAAGH,OAAO,CAAC,iCAAiC,CAAE;;EAE5E;EAEA,MAAMK,WAAWA,CAACC,OAA6B;IAC7C;;IAEA,IAAI,IAAI,CAACL,kBAAkB,KAAK,CAAC,CAAC,EAAE;MAClC,OAAOK,OAAO;KACf,MAAM;MACL,MAAMC,eAAe,GAAG,MAAMD,OAAO;MACrC,IAAIC,eAAe,CAACD,OAAO,CAACE,MAAM,GAAG,IAAI,CAACP,kBAAkB,EAAE;QAC5D,MAAM;UACJQ,IAAI,EAAEd,WAAA,CAAAe,MAAM,CAACC,kBAAkB;UAC/BC,OAAO,EAAE,iCAAiCL,eAAe,CAACD,OAAO,CAACE,MAAM,QAAQ,IAAI,CAACP,kBAAkB,GAAG;UAC1GY,QAAQ,EAAE,IAAIjB,UAAA,CAAAkB,QAAQ;SACvB;OACF,MAAM;QACL,OAAOP,eAAe;;;EAG5B;EAEA,MAAMQ,cAAcA,CAACT,OAAwB;IAC3C;;IAEA,IAAI,IAAI,CAACH,qBAAqB,KAAK,CAAC,CAAC,EAAE;MACrC,OAAOG,OAAO;KACf,MAAM;MACL,MAAMC,eAAe,GAAG,MAAMD,OAAO;MACrC,IAAIC,eAAe,CAACC,MAAM,GAAG,IAAI,CAACL,qBAAqB,EAAE;QACvD,MAAM;UACJM,IAAI,EAAEd,WAAA,CAAAe,MAAM,CAACC,kBAAkB;UAC/BC,OAAO,EAAE,qCAAqCL,eAAe,CAACC,MAAM,QAAQ,IAAI,CAACL,qBAAqB,GAAG;UACzGU,QAAQ,EAAE,IAAIjB,UAAA,CAAAkB,QAAQ;SACvB;OACF,MAAM;QACL,OAAOP,eAAe;;;EAG5B;;AAnDFS,OAAA,CAAAnB,oBAAA,GAAAA,oBAAA;AAsDA,MAAaoB,2BAA2B;EAEtClB,YAA6BC,OAAuB;IAAvB,KAAAA,OAAO,GAAPA,OAAO;EAAmB;EAEvDkB,YAAYA,CAAA;IACV,OAAO,IAAIrB,oBAAoB,CAAC,IAAI,CAACG,OAAO,CAAC;EAC/C;;AANFgB,OAAA,CAAAC,2BAAA,GAAAA,2BAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}