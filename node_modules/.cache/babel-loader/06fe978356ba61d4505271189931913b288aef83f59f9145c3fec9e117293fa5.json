{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateLoadBalancingConfig = exports.getFirstUsableConfig = exports.isLoadBalancerNameRegistered = exports.createLoadBalancer = exports.registerDefaultLoadBalancerType = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = void 0;\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent\n * @param overrides\n */\nfunction createChildChannelControlHelper(parent, overrides) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n  return {\n    createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),\n    updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),\n    requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),\n    addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),\n    removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent)\n  };\n}\nexports.createChildChannelControlHelper = createChildChannelControlHelper;\nconst registeredLoadBalancerTypes = {};\nlet defaultLoadBalancerType = null;\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\n  registeredLoadBalancerTypes[typeName] = {\n    LoadBalancer: loadBalancerType,\n    LoadBalancingConfig: loadBalancingConfigType\n  };\n}\nexports.registerLoadBalancerType = registerLoadBalancerType;\nfunction registerDefaultLoadBalancerType(typeName) {\n  defaultLoadBalancerType = typeName;\n}\nexports.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;\nfunction createLoadBalancer(config, channelControlHelper) {\n  const typeName = config.getLoadBalancerName();\n  if (typeName in registeredLoadBalancerTypes) {\n    return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\n  } else {\n    return null;\n  }\n}\nexports.createLoadBalancer = createLoadBalancer;\nfunction isLoadBalancerNameRegistered(typeName) {\n  return typeName in registeredLoadBalancerTypes;\n}\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\nfunction getFirstUsableConfig(configs) {\n  let fallbackTodefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  for (const config of configs) {\n    if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {\n      return config;\n    }\n  }\n  if (fallbackTodefault) {\n    if (defaultLoadBalancerType) {\n      return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\nexports.getFirstUsableConfig = getFirstUsableConfig;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validateLoadBalancingConfig(obj) {\n  if (!(obj !== null && typeof obj === 'object')) {\n    throw new Error('Load balancing config must be an object');\n  }\n  const keys = Object.keys(obj);\n  if (keys.length !== 1) {\n    throw new Error('Provided load balancing config has multiple conflicting entries');\n  }\n  const typeName = keys[0];\n  if (typeName in registeredLoadBalancerTypes) {\n    return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);\n  } else {\n    throw new Error(`Unrecognized load balancing config name ${typeName}`);\n  }\n}\nexports.validateLoadBalancingConfig = validateLoadBalancingConfig;","map":{"version":3,"names":["createChildChannelControlHelper","parent","overrides","createSubchannel","_b","_a","bind","updateState","_d","_c","requestReresolution","_f","_e","addChannelzChild","_h","_g","removeChannelzChild","_k","_j","exports","registeredLoadBalancerTypes","defaultLoadBalancerType","registerLoadBalancerType","typeName","loadBalancerType","loadBalancingConfigType","LoadBalancer","LoadBalancingConfig","registerDefaultLoadBalancerType","createLoadBalancer","config","channelControlHelper","getLoadBalancerName","isLoadBalancerNameRegistered","getFirstUsableConfig","configs","fallbackTodefault","arguments","length","undefined","validateLoadBalancingConfig","obj","Error","keys","Object","createFromJson"],"sources":["/Users/usmanchaudhry/Documents/GitHub/weather-app/face-recognition/node_modules/@grpc/grpc-js/src/load-balancer.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { ChannelOptions } from './channel-options';\nimport { Subchannel } from './subchannel';\nimport { SubchannelAddress } from './subchannel-address';\nimport { ConnectivityState } from './connectivity-state';\nimport { Picker } from './picker';\nimport { ChannelRef, SubchannelRef } from './channelz';\nimport { SubchannelInterface } from './subchannel-interface';\n\n/**\n * A collection of functions associated with a channel that a load balancer\n * can call as necessary.\n */\nexport interface ChannelControlHelper {\n  /**\n   * Returns a subchannel connected to the specified address.\n   * @param subchannelAddress The address to connect to\n   * @param subchannelArgs Extra channel arguments specified by the load balancer\n   */\n  createSubchannel(\n    subchannelAddress: SubchannelAddress,\n    subchannelArgs: ChannelOptions\n  ): SubchannelInterface;\n  /**\n   * Passes a new subchannel picker up to the channel. This is called if either\n   * the connectivity state changes or if a different picker is needed for any\n   * other reason.\n   * @param connectivityState New connectivity state\n   * @param picker New picker\n   */\n  updateState(connectivityState: ConnectivityState, picker: Picker): void;\n  /**\n   * Request new data from the resolver.\n   */\n  requestReresolution(): void;\n  addChannelzChild(child: ChannelRef | SubchannelRef): void;\n  removeChannelzChild(child: ChannelRef | SubchannelRef): void;\n}\n\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent \n * @param overrides \n */\nexport function createChildChannelControlHelper(parent: ChannelControlHelper, overrides: Partial<ChannelControlHelper>): ChannelControlHelper {\n  return {\n    createSubchannel: overrides.createSubchannel?.bind(overrides) ?? parent.createSubchannel.bind(parent),\n    updateState: overrides.updateState?.bind(overrides) ?? parent.updateState.bind(parent),\n    requestReresolution: overrides.requestReresolution?.bind(overrides) ?? parent.requestReresolution.bind(parent),\n    addChannelzChild: overrides.addChannelzChild?.bind(overrides) ?? parent.addChannelzChild.bind(parent),\n    removeChannelzChild: overrides.removeChannelzChild?.bind(overrides) ?? parent.removeChannelzChild.bind(parent)\n  };\n}\n\n/**\n * Tracks one or more connected subchannels and determines which subchannel\n * each request should use.\n */\nexport interface LoadBalancer {\n  /**\n   * Gives the load balancer a new list of addresses to start connecting to.\n   * The load balancer will start establishing connections with the new list,\n   * but will continue using any existing connections until the new connections\n   * are established\n   * @param addressList The new list of addresses to connect to\n   * @param lbConfig The load balancing config object from the service config,\n   *     if one was provided\n   */\n  updateAddressList(\n    addressList: SubchannelAddress[],\n    lbConfig: LoadBalancingConfig,\n    attributes: { [key: string]: unknown }\n  ): void;\n  /**\n   * If the load balancer is currently in the IDLE state, start connecting.\n   */\n  exitIdle(): void;\n  /**\n   * If the load balancer is currently in the CONNECTING or TRANSIENT_FAILURE\n   * state, reset the current connection backoff timeout to its base value and\n   * transition to CONNECTING if in TRANSIENT_FAILURE.\n   */\n  resetBackoff(): void;\n  /**\n   * The load balancer unrefs all of its subchannels and stops calling methods\n   * of its channel control helper.\n   */\n  destroy(): void;\n  /**\n   * Get the type name for this load balancer type. Must be constant across an\n   * entire load balancer implementation class and must match the name that the\n   * balancer implementation class was registered with.\n   */\n  getTypeName(): string;\n}\n\nexport interface LoadBalancerConstructor {\n  new (channelControlHelper: ChannelControlHelper): LoadBalancer;\n}\n\nexport interface LoadBalancingConfig {\n  getLoadBalancerName(): string;\n  toJsonObject(): object;\n}\n\nexport interface LoadBalancingConfigConstructor {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any): LoadBalancingConfig;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createFromJson(obj: any): LoadBalancingConfig;\n}\n\nconst registeredLoadBalancerTypes: {\n  [name: string]: {\n    LoadBalancer: LoadBalancerConstructor;\n    LoadBalancingConfig: LoadBalancingConfigConstructor;\n  };\n} = {};\n\nlet defaultLoadBalancerType: string | null = null;\n\nexport function registerLoadBalancerType(\n  typeName: string,\n  loadBalancerType: LoadBalancerConstructor,\n  loadBalancingConfigType: LoadBalancingConfigConstructor\n) {\n  registeredLoadBalancerTypes[typeName] = {\n    LoadBalancer: loadBalancerType,\n    LoadBalancingConfig: loadBalancingConfigType,\n  };\n}\n\nexport function registerDefaultLoadBalancerType(typeName: string) {\n  defaultLoadBalancerType = typeName;\n}\n\nexport function createLoadBalancer(\n  config: LoadBalancingConfig,\n  channelControlHelper: ChannelControlHelper\n): LoadBalancer | null {\n  const typeName = config.getLoadBalancerName();\n  if (typeName in registeredLoadBalancerTypes) {\n    return new registeredLoadBalancerTypes[typeName].LoadBalancer(\n      channelControlHelper\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function isLoadBalancerNameRegistered(typeName: string): boolean {\n  return typeName in registeredLoadBalancerTypes;\n}\n\nexport function getFirstUsableConfig(\n  configs: LoadBalancingConfig[],\n  fallbackTodefault?: true\n): LoadBalancingConfig;\nexport function getFirstUsableConfig(\n  configs: LoadBalancingConfig[],\n  fallbackTodefault = false\n): LoadBalancingConfig | null {\n  for (const config of configs) {\n    if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {\n      return config;\n    }\n  }\n  if (fallbackTodefault) {\n    if (defaultLoadBalancerType) {\n      return new registeredLoadBalancerTypes[\n        defaultLoadBalancerType\n      ]!.LoadBalancingConfig();\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function validateLoadBalancingConfig(obj: any): LoadBalancingConfig {\n  if (!(obj !== null && typeof obj === 'object')) {\n    throw new Error('Load balancing config must be an object');\n  }\n  const keys = Object.keys(obj);\n  if (keys.length !== 1) {\n    throw new Error(\n      'Provided load balancing config has multiple conflicting entries'\n    );\n  }\n  const typeName = keys[0];\n  if (typeName in registeredLoadBalancerTypes) {\n    return registeredLoadBalancerTypes[\n      typeName\n    ].LoadBalancingConfig.createFromJson(obj[typeName]);\n  } else {\n    throw new Error(`Unrecognized load balancing config name ${typeName}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}