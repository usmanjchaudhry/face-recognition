{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\nconst resolver_1 = require(\"./resolver\");\nconst dns = require(\"dns\");\nconst util = require(\"util\");\nconst service_config_1 = require(\"./service-config\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst logging = require(\"./logging\");\nconst constants_2 = require(\"./constants\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst net_1 = require(\"net\");\nconst backoff_timeout_1 = require(\"./backoff-timeout\");\nconst TRACER_NAME = 'dns_resolver';\nfunction trace(text) {\n  logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;\nconst resolveTxtPromise = util.promisify(dns.resolveTxt);\nconst dnsLookupPromise = util.promisify(dns.lookup);\n/**\n * Merge any number of arrays into a single alternating array\n * @param arrays\n */\nfunction mergeArrays() {\n  const result = [];\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  for (let i = 0; i < Math.max.apply(null, arrays.map(array => array.length)); i++) {\n    for (const array of arrays) {\n      if (i < array.length) {\n        result.push(array[i]);\n      }\n    }\n  }\n  return result;\n}\n/**\n * Resolver implementation that handles DNS names and IP addresses.\n */\nclass DnsResolver {\n  constructor(target, listener, channelOptions) {\n    var _a, _b, _c;\n    this.target = target;\n    this.listener = listener;\n    this.pendingLookupPromise = null;\n    this.pendingTxtPromise = null;\n    this.latestLookupResult = null;\n    this.latestServiceConfig = null;\n    this.latestServiceConfigError = null;\n    this.continueResolving = false;\n    this.isNextResolutionTimerRunning = false;\n    this.isServiceConfigEnabled = true;\n    trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\n    const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\n    if (hostPort === null) {\n      this.ipResult = null;\n      this.dnsHostname = null;\n      this.port = null;\n    } else {\n      if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {\n        this.ipResult = [{\n          host: hostPort.host,\n          port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n        }];\n        this.dnsHostname = null;\n        this.port = null;\n      } else {\n        this.ipResult = null;\n        this.dnsHostname = hostPort.host;\n        this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : DEFAULT_PORT;\n      }\n    }\n    this.percentage = Math.random() * 100;\n    if (channelOptions['grpc.service_config_disable_resolution'] === 1) {\n      this.isServiceConfigEnabled = false;\n    }\n    this.defaultResolutionError = {\n      code: constants_1.Status.UNAVAILABLE,\n      details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,\n      metadata: new metadata_1.Metadata()\n    };\n    const backoffOptions = {\n      initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\n      maxDelay: channelOptions['grpc.max_reconnect_backoff_ms']\n    };\n    this.backoff = new backoff_timeout_1.BackoffTimeout(() => {\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, backoffOptions);\n    this.backoff.unref();\n    this.minTimeBetweenResolutionsMs = (_c = channelOptions['grpc.dns_min_time_between_resolutions_ms']) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\n    this.nextResolutionTimer = setTimeout(() => {}, 0);\n    clearTimeout(this.nextResolutionTimer);\n  }\n  /**\n   * If the target is an IP address, just provide that address as a result.\n   * Otherwise, initiate A, AAAA, and TXT lookups\n   */\n  startResolution() {\n    if (this.ipResult !== null) {\n      trace('Returning IP address for target ' + (0, uri_parser_1.uriToString)(this.target));\n      setImmediate(() => {\n        this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});\n      });\n      this.backoff.stop();\n      this.backoff.reset();\n      return;\n    }\n    if (this.dnsHostname === null) {\n      trace('Failed to parse DNS address ' + (0, uri_parser_1.uriToString)(this.target));\n      setImmediate(() => {\n        this.listener.onError({\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,\n          metadata: new metadata_1.Metadata()\n        });\n      });\n      this.stopNextResolutionTimer();\n    } else {\n      if (this.pendingLookupPromise !== null) {\n        return;\n      }\n      trace('Looking up DNS hostname ' + this.dnsHostname);\n      /* We clear out latestLookupResult here to ensure that it contains the\n       * latest result since the last time we started resolving. That way, the\n       * TXT resolution handler can use it, but only if it finishes second. We\n       * don't clear out any previous service config results because it's\n       * better to use a service config that's slightly out of date than to\n       * revert to an effectively blank one. */\n      this.latestLookupResult = null;\n      const hostname = this.dnsHostname;\n      /* We lookup both address families here and then split them up later\n       * because when looking up a single family, dns.lookup outputs an error\n       * if the name exists but there are no records for that family, and that\n       * error is indistinguishable from other kinds of errors */\n      this.pendingLookupPromise = dnsLookupPromise(hostname, {\n        all: true\n      });\n      this.pendingLookupPromise.then(addressList => {\n        this.pendingLookupPromise = null;\n        this.backoff.reset();\n        this.backoff.stop();\n        const ip4Addresses = addressList.filter(addr => addr.family === 4);\n        const ip6Addresses = addressList.filter(addr => addr.family === 6);\n        this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map(addr => ({\n          host: addr.address,\n          port: +this.port\n        }));\n        const allAddressesString = '[' + this.latestLookupResult.map(addr => addr.host + ':' + addr.port).join(',') + ']';\n        trace('Resolved addresses for target ' + (0, uri_parser_1.uriToString)(this.target) + ': ' + allAddressesString);\n        if (this.latestLookupResult.length === 0) {\n          this.listener.onError(this.defaultResolutionError);\n          return;\n        }\n        /* If the TXT lookup has not yet finished, both of the last two\n         * arguments will be null, which is the equivalent of getting an\n         * empty TXT response. When the TXT lookup does finish, its handler\n         * can update the service config by using the same address list */\n        this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n      }, err => {\n        trace('Resolution error for target ' + (0, uri_parser_1.uriToString)(this.target) + ': ' + err.message);\n        this.pendingLookupPromise = null;\n        this.stopNextResolutionTimer();\n        this.listener.onError(this.defaultResolutionError);\n      });\n      /* If there already is a still-pending TXT resolution, we can just use\n       * that result when it comes in */\n      if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\n        /* We handle the TXT query promise differently than the others because\n         * the name resolution attempt as a whole is a success even if the TXT\n         * lookup fails */\n        this.pendingTxtPromise = resolveTxtPromise(hostname);\n        this.pendingTxtPromise.then(txtRecord => {\n          this.pendingTxtPromise = null;\n          try {\n            this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);\n          } catch (err) {\n            this.latestServiceConfigError = {\n              code: constants_1.Status.UNAVAILABLE,\n              details: 'Parsing service config failed',\n              metadata: new metadata_1.Metadata()\n            };\n          }\n          if (this.latestLookupResult !== null) {\n            /* We rely here on the assumption that calling this function with\n             * identical parameters will be essentialy idempotent, and calling\n             * it with the same address list and a different service config\n             * should result in a fast and seamless switchover. */\n            this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n          }\n        }, err => {\n          /* If TXT lookup fails we should do nothing, which means that we\n           * continue to use the result of the most recent successful lookup,\n           * or the default null config object if there has never been a\n           * successful lookup. We do not set the latestServiceConfigError\n           * here because that is specifically used for response validation\n           * errors. We still need to handle this error so that it does not\n           * bubble up as an unhandled promise rejection. */\n        });\n      }\n    }\n  }\n  startNextResolutionTimer() {\n    var _a, _b;\n    clearTimeout(this.nextResolutionTimer);\n    this.nextResolutionTimer = (_b = (_a = setTimeout(() => {\n      this.stopNextResolutionTimer();\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, this.minTimeBetweenResolutionsMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    this.isNextResolutionTimerRunning = true;\n  }\n  stopNextResolutionTimer() {\n    clearTimeout(this.nextResolutionTimer);\n    this.isNextResolutionTimerRunning = false;\n  }\n  startResolutionWithBackoff() {\n    if (this.pendingLookupPromise === null) {\n      this.continueResolving = false;\n      this.startResolution();\n      this.backoff.runOnce();\n      this.startNextResolutionTimer();\n    }\n  }\n  updateResolution() {\n    /* If there is a pending lookup, just let it finish. Otherwise, if the\n     * nextResolutionTimer or backoff timer is running, set the\n     * continueResolving flag to resolve when whichever of those timers\n     * fires. Otherwise, start resolving immediately. */\n    if (this.pendingLookupPromise === null) {\n      if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\n        this.continueResolving = true;\n      } else {\n        this.startResolutionWithBackoff();\n      }\n    }\n  }\n  destroy() {\n    this.continueResolving = false;\n    this.backoff.stop();\n    this.stopNextResolutionTimer();\n  }\n  /**\n   * Get the default authority for the given target. For IP targets, that is\n   * the IP address. For DNS targets, it is the hostname.\n   * @param target\n   */\n  static getDefaultAuthority(target) {\n    return target.path;\n  }\n}\n/**\n * Set up the DNS resolver class by registering it as the handler for the\n * \"dns:\" prefix and as the default resolver.\n */\nfunction setup() {\n  (0, resolver_1.registerResolver)('dns', DnsResolver);\n  (0, resolver_1.registerDefaultScheme)('dns');\n}\nexports.setup = setup;","map":{"version":3,"names":["resolver_1","require","dns","util","service_config_1","constants_1","metadata_1","logging","constants_2","uri_parser_1","net_1","backoff_timeout_1","TRACER_NAME","trace","text","LogVerbosity","DEBUG","DEFAULT_PORT","DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS","resolveTxtPromise","promisify","resolveTxt","dnsLookupPromise","lookup","mergeArrays","result","_len","arguments","length","arrays","Array","_key","i","Math","max","apply","map","array","push","DnsResolver","constructor","target","listener","channelOptions","pendingLookupPromise","pendingTxtPromise","latestLookupResult","latestServiceConfig","latestServiceConfigError","continueResolving","isNextResolutionTimerRunning","isServiceConfigEnabled","uriToString","hostPort","splitHostPort","path","ipResult","dnsHostname","port","isIPv4","host","isIPv6","_a","_b","percentage","random","defaultResolutionError","code","Status","UNAVAILABLE","details","metadata","Metadata","backoffOptions","initialDelay","maxDelay","backoff","BackoffTimeout","startResolutionWithBackoff","unref","minTimeBetweenResolutionsMs","_c","nextResolutionTimer","setTimeout","clearTimeout","startResolution","setImmediate","onSuccessfulResolution","stop","reset","onError","stopNextResolutionTimer","hostname","all","then","addressList","ip4Addresses","filter","addr","family","ip6Addresses","address","allAddressesString","join","err","message","txtRecord","extractAndSelectServiceConfig","startNextResolutionTimer","call","runOnce","updateResolution","isRunning","destroy","getDefaultAuthority","setup","registerResolver","registerDefaultScheme","exports"],"sources":["/Users/usmanchaudhry/Documents/GitHub/weather-app/face-recognition/node_modules/@grpc/grpc-js/src/resolver-dns.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Resolver,\n  ResolverListener,\n  registerResolver,\n  registerDefaultScheme,\n} from './resolver';\nimport * as dns from 'dns';\nimport * as util from 'util';\nimport { extractAndSelectServiceConfig, ServiceConfig } from './service-config';\nimport { Status } from './constants';\nimport { StatusObject } from './call-interface';\nimport { Metadata } from './metadata';\nimport * as logging from './logging';\nimport { LogVerbosity } from './constants';\nimport { SubchannelAddress, TcpSubchannelAddress } from './subchannel-address';\nimport { GrpcUri, uriToString, splitHostPort } from './uri-parser';\nimport { isIPv6, isIPv4 } from 'net';\nimport { ChannelOptions } from './channel-options';\nimport { BackoffOptions, BackoffTimeout } from './backoff-timeout';\n\nconst TRACER_NAME = 'dns_resolver';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\n\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30_000;\n\nconst resolveTxtPromise = util.promisify(dns.resolveTxt);\nconst dnsLookupPromise = util.promisify(dns.lookup);\n\n/**\n * Merge any number of arrays into a single alternating array\n * @param arrays\n */\nfunction mergeArrays<T>(...arrays: T[][]): T[] {\n  const result: T[] = [];\n  for (\n    let i = 0;\n    i <\n    Math.max.apply(\n      null,\n      arrays.map((array) => array.length)\n    );\n    i++\n  ) {\n    for (const array of arrays) {\n      if (i < array.length) {\n        result.push(array[i]);\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Resolver implementation that handles DNS names and IP addresses.\n */\nclass DnsResolver implements Resolver {\n  private readonly ipResult: SubchannelAddress[] | null;\n  private readonly dnsHostname: string | null;\n  private readonly port: number | null;\n  /**\n   * Minimum time between resolutions, measured as the time between starting\n   * successive resolution requests. Only applies to successful resolutions.\n   * Failures are handled by the backoff timer.\n   */\n  private readonly minTimeBetweenResolutionsMs: number;\n  private pendingLookupPromise: Promise<dns.LookupAddress[]> | null = null;\n  private pendingTxtPromise: Promise<string[][]> | null = null;\n  private latestLookupResult: TcpSubchannelAddress[] | null = null;\n  private latestServiceConfig: ServiceConfig | null = null;\n  private latestServiceConfigError: StatusObject | null = null;\n  private percentage: number;\n  private defaultResolutionError: StatusObject;\n  private backoff: BackoffTimeout;\n  private continueResolving = false;\n  private nextResolutionTimer: NodeJS.Timer;\n  private isNextResolutionTimerRunning = false;\n  private isServiceConfigEnabled = true;\n  constructor(\n    private target: GrpcUri,\n    private listener: ResolverListener,\n    channelOptions: ChannelOptions\n  ) {\n    trace('Resolver constructed for target ' + uriToString(target));\n    const hostPort = splitHostPort(target.path);\n    if (hostPort === null) {\n      this.ipResult = null;\n      this.dnsHostname = null;\n      this.port = null;\n    } else {\n      if (isIPv4(hostPort.host) || isIPv6(hostPort.host)) {\n        this.ipResult = [\n          {\n            host: hostPort.host,\n            port: hostPort.port ?? DEFAULT_PORT,\n          },\n        ];\n        this.dnsHostname = null;\n        this.port = null;\n      } else {\n        this.ipResult = null;\n        this.dnsHostname = hostPort.host;\n        this.port = hostPort.port ?? DEFAULT_PORT;\n      }\n    }\n    this.percentage = Math.random() * 100;\n\n    if (channelOptions['grpc.service_config_disable_resolution'] === 1) {\n      this.isServiceConfigEnabled = false;\n    }\n\n    this.defaultResolutionError = {\n      code: Status.UNAVAILABLE,\n      details: `Name resolution failed for target ${uriToString(this.target)}`,\n      metadata: new Metadata(),\n    };\n    \n    const backoffOptions: BackoffOptions = {\n      initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\n      maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],\n    };\n\n    this.backoff = new BackoffTimeout(() => {\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, backoffOptions);\n    this.backoff.unref();\n\n    this.minTimeBetweenResolutionsMs = channelOptions['grpc.dns_min_time_between_resolutions_ms'] ?? DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\n    this.nextResolutionTimer = setTimeout(() => {}, 0);\n    clearTimeout(this.nextResolutionTimer);\n  }\n\n  /**\n   * If the target is an IP address, just provide that address as a result.\n   * Otherwise, initiate A, AAAA, and TXT lookups\n   */\n  private startResolution() {\n    if (this.ipResult !== null) {\n      trace('Returning IP address for target ' + uriToString(this.target));\n      setImmediate(() => {\n        this.listener.onSuccessfulResolution(\n          this.ipResult!,\n          null,\n          null,\n          null,\n          {}\n        );\n      });\n      this.backoff.stop();\n      this.backoff.reset();\n      return;\n    }\n    if (this.dnsHostname === null) {\n      trace('Failed to parse DNS address ' + uriToString(this.target));\n      setImmediate(() => {\n        this.listener.onError({\n          code: Status.UNAVAILABLE,\n          details: `Failed to parse DNS address ${uriToString(this.target)}`,\n          metadata: new Metadata(),\n        });\n      });\n      this.stopNextResolutionTimer();\n    } else {\n      if (this.pendingLookupPromise !== null) {\n        return;\n      }\n      trace('Looking up DNS hostname ' + this.dnsHostname);\n      /* We clear out latestLookupResult here to ensure that it contains the\n       * latest result since the last time we started resolving. That way, the\n       * TXT resolution handler can use it, but only if it finishes second. We\n       * don't clear out any previous service config results because it's\n       * better to use a service config that's slightly out of date than to\n       * revert to an effectively blank one. */\n      this.latestLookupResult = null;\n      const hostname: string = this.dnsHostname;\n      /* We lookup both address families here and then split them up later\n       * because when looking up a single family, dns.lookup outputs an error\n       * if the name exists but there are no records for that family, and that\n       * error is indistinguishable from other kinds of errors */\n      this.pendingLookupPromise = dnsLookupPromise(hostname, { all: true });\n      this.pendingLookupPromise.then(\n        (addressList) => {\n          this.pendingLookupPromise = null;\n          this.backoff.reset();\n          this.backoff.stop();\n          const ip4Addresses: dns.LookupAddress[] = addressList.filter(\n            (addr) => addr.family === 4\n          );\n          const ip6Addresses: dns.LookupAddress[] = addressList.filter(\n            (addr) => addr.family === 6\n          );\n          this.latestLookupResult = mergeArrays(\n            ip6Addresses,\n            ip4Addresses\n          ).map((addr) => ({ host: addr.address, port: +this.port! }));\n          const allAddressesString: string =\n            '[' +\n            this.latestLookupResult\n              .map((addr) => addr.host + ':' + addr.port)\n              .join(',') +\n            ']';\n          trace(\n            'Resolved addresses for target ' +\n              uriToString(this.target) +\n              ': ' +\n              allAddressesString\n          );\n          if (this.latestLookupResult.length === 0) {\n            this.listener.onError(this.defaultResolutionError);\n            return;\n          }\n          /* If the TXT lookup has not yet finished, both of the last two\n           * arguments will be null, which is the equivalent of getting an\n           * empty TXT response. When the TXT lookup does finish, its handler\n           * can update the service config by using the same address list */\n          this.listener.onSuccessfulResolution(\n            this.latestLookupResult,\n            this.latestServiceConfig,\n            this.latestServiceConfigError,\n            null,\n            {}\n          );\n        },\n        (err) => {\n          trace(\n            'Resolution error for target ' +\n              uriToString(this.target) +\n              ': ' +\n              (err as Error).message\n          );\n          this.pendingLookupPromise = null;\n          this.stopNextResolutionTimer();\n          this.listener.onError(this.defaultResolutionError);\n        }\n      );\n      /* If there already is a still-pending TXT resolution, we can just use\n       * that result when it comes in */\n      if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\n        /* We handle the TXT query promise differently than the others because\n         * the name resolution attempt as a whole is a success even if the TXT\n         * lookup fails */\n        this.pendingTxtPromise = resolveTxtPromise(hostname);\n        this.pendingTxtPromise.then(\n          (txtRecord) => {\n            this.pendingTxtPromise = null;\n            try {\n              this.latestServiceConfig = extractAndSelectServiceConfig(\n                txtRecord,\n                this.percentage\n              );\n            } catch (err) {\n              this.latestServiceConfigError = {\n                code: Status.UNAVAILABLE,\n                details: 'Parsing service config failed',\n                metadata: new Metadata(),\n              };\n            }\n            if (this.latestLookupResult !== null) {\n              /* We rely here on the assumption that calling this function with\n               * identical parameters will be essentialy idempotent, and calling\n               * it with the same address list and a different service config\n               * should result in a fast and seamless switchover. */\n              this.listener.onSuccessfulResolution(\n                this.latestLookupResult,\n                this.latestServiceConfig,\n                this.latestServiceConfigError,\n                null,\n                {}\n              );\n            }\n          },\n          (err) => {\n            /* If TXT lookup fails we should do nothing, which means that we\n             * continue to use the result of the most recent successful lookup,\n             * or the default null config object if there has never been a\n             * successful lookup. We do not set the latestServiceConfigError\n             * here because that is specifically used for response validation\n             * errors. We still need to handle this error so that it does not\n             * bubble up as an unhandled promise rejection. */\n          }\n        );\n      }\n    }\n  }\n\n  private startNextResolutionTimer() {\n    clearTimeout(this.nextResolutionTimer);\n    this.nextResolutionTimer = setTimeout(() => {\n      this.stopNextResolutionTimer();\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, this.minTimeBetweenResolutionsMs).unref?.();\n    this.isNextResolutionTimerRunning = true;\n  }\n\n  private stopNextResolutionTimer() {\n    clearTimeout(this.nextResolutionTimer);\n    this.isNextResolutionTimerRunning = false;\n  }\n\n  private startResolutionWithBackoff() {\n    if (this.pendingLookupPromise === null) {\n      this.continueResolving = false;\n      this.startResolution();\n      this.backoff.runOnce();\n      this.startNextResolutionTimer();\n    }\n  }\n\n  updateResolution() {\n    /* If there is a pending lookup, just let it finish. Otherwise, if the\n     * nextResolutionTimer or backoff timer is running, set the\n     * continueResolving flag to resolve when whichever of those timers\n     * fires. Otherwise, start resolving immediately. */\n    if (this.pendingLookupPromise === null) {\n      if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\n        this.continueResolving = true;\n      } else {\n        this.startResolutionWithBackoff();\n      }\n    }\n  }\n\n  destroy() {\n    this.continueResolving = false;\n    this.backoff.stop();\n    this.stopNextResolutionTimer();\n  }\n\n  /**\n   * Get the default authority for the given target. For IP targets, that is\n   * the IP address. For DNS targets, it is the hostname.\n   * @param target\n   */\n  static getDefaultAuthority(target: GrpcUri): string {\n    return target.path;\n  }\n}\n\n/**\n * Set up the DNS resolver class by registering it as the handler for the\n * \"dns:\" prefix and as the default resolver.\n */\nexport function setup(): void {\n  registerResolver('dns', DnsResolver);\n  registerDefaultScheme('dns');\n}\n\nexport interface DnsUrl {\n  host: string;\n  port?: string;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}