{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InternalChannel = void 0;\nconst channel_credentials_1 = require(\"./channel-credentials\");\nconst resolving_load_balancer_1 = require(\"./resolving-load-balancer\");\nconst subchannel_pool_1 = require(\"./subchannel-pool\");\nconst picker_1 = require(\"./picker\");\nconst constants_1 = require(\"./constants\");\nconst filter_stack_1 = require(\"./filter-stack\");\nconst compression_filter_1 = require(\"./compression-filter\");\nconst resolver_1 = require(\"./resolver\");\nconst logging_1 = require(\"./logging\");\nconst max_message_size_filter_1 = require(\"./max-message-size-filter\");\nconst http_proxy_1 = require(\"./http_proxy\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst channelz_1 = require(\"./channelz\");\nconst load_balancing_call_1 = require(\"./load-balancing-call\");\nconst deadline_1 = require(\"./deadline\");\nconst resolving_call_1 = require(\"./resolving-call\");\nconst call_number_1 = require(\"./call-number\");\nconst control_plane_status_1 = require(\"./control-plane-status\");\nconst retrying_call_1 = require(\"./retrying-call\");\nconst subchannel_interface_1 = require(\"./subchannel-interface\");\n/**\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\n */\nconst MAX_TIMEOUT_TIME = 2147483647;\nconst RETRY_THROTTLER_MAP = new Map();\nconst DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24; // 16 MB\nconst DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20; // 1 MB\nclass ChannelSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n  constructor(childSubchannel, channel) {\n    super(childSubchannel);\n    this.channel = channel;\n    this.refCount = 0;\n    this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime) => {\n      channel.throttleKeepalive(keepaliveTime);\n    };\n    childSubchannel.addConnectivityStateListener(this.subchannelStateListener);\n  }\n  ref() {\n    this.child.ref();\n    this.refCount += 1;\n  }\n  unref() {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      this.child.removeConnectivityStateListener(this.subchannelStateListener);\n      this.channel.removeWrappedSubchannel(this);\n    }\n  }\n}\nclass InternalChannel {\n  constructor(target, credentials, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    this.credentials = credentials;\n    this.options = options;\n    this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n    this.currentPicker = new picker_1.UnavailablePicker();\n    /**\n     * Calls queued up to get a call config. Should only be populated before the\n     * first time the resolver returns a result, which includes the ConfigSelector.\n     */\n    this.configSelectionQueue = [];\n    this.pickQueue = [];\n    this.connectivityStateWatchers = [];\n    this.configSelector = null;\n    /**\n     * This is the error from the name resolver if it failed most recently. It\n     * is only used to end calls that start while there is no config selector\n     * and the name resolver is in backoff, so it should be nulled if\n     * configSelector becomes set or the channel state becomes anything other\n     * than TRANSIENT_FAILURE.\n     */\n    this.currentResolutionError = null;\n    this.wrappedSubchannels = new Set();\n    // Channelz info\n    this.channelzEnabled = true;\n    this.callTracker = new channelz_1.ChannelzCallTracker();\n    this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n    if (typeof target !== 'string') {\n      throw new TypeError('Channel target must be a string');\n    }\n    if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\n      throw new TypeError('Channel credentials must be a ChannelCredentials object');\n    }\n    if (options) {\n      if (typeof options !== 'object') {\n        throw new TypeError('Channel options must be an object');\n      }\n    }\n    this.originalTarget = target;\n    const originalTargetUri = (0, uri_parser_1.parseUri)(target);\n    if (originalTargetUri === null) {\n      throw new Error(`Could not parse target name \"${target}\"`);\n    }\n    /* This ensures that the target has a scheme that is registered with the\n     * resolver */\n    const defaultSchemeMapResult = (0, resolver_1.mapUriDefaultScheme)(originalTargetUri);\n    if (defaultSchemeMapResult === null) {\n      throw new Error(`Could not find a default scheme for target name \"${target}\"`);\n    }\n    this.callRefTimer = setInterval(() => {}, MAX_TIMEOUT_TIME);\n    (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n    this.channelzTrace = new channelz_1.ChannelzTrace();\n    this.channelzRef = (0, channelz_1.registerChannelzChannel)(target, () => this.getChannelzInfo(), this.channelzEnabled);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Channel created');\n    }\n    if (this.options['grpc.default_authority']) {\n      this.defaultAuthority = this.options['grpc.default_authority'];\n    } else {\n      this.defaultAuthority = (0, resolver_1.getDefaultAuthority)(defaultSchemeMapResult);\n    }\n    const proxyMapResult = (0, http_proxy_1.mapProxyName)(defaultSchemeMapResult, options);\n    this.target = proxyMapResult.target;\n    this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\n    /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\n     * the grpc.use_local_subchannel_pool channel option means. */\n    this.subchannelPool = (0, subchannel_pool_1.getSubchannelPool)(((_c = options['grpc.use_local_subchannel_pool']) !== null && _c !== void 0 ? _c : 0) === 0);\n    this.retryBufferTracker = new retrying_call_1.MessageBufferTracker((_d = options['grpc.retry_buffer_size']) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_BUFFER_SIZE_BYTES, (_e = options['grpc.per_rpc_retry_buffer_size']) !== null && _e !== void 0 ? _e : DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES);\n    this.keepaliveTime = (_f = options['grpc.keepalive_time_ms']) !== null && _f !== void 0 ? _f : -1;\n    const channelControlHelper = {\n      createSubchannel: (subchannelAddress, subchannelArgs) => {\n        const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, Object.assign({}, this.options, subchannelArgs), this.credentials);\n        subchannel.throttleKeepalive(this.keepaliveTime);\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Created subchannel or used existing subchannel', subchannel.getChannelzRef());\n        }\n        const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);\n        this.wrappedSubchannels.add(wrappedSubchannel);\n        return wrappedSubchannel;\n      },\n      updateState: (connectivityState, picker) => {\n        this.currentPicker = picker;\n        const queueCopy = this.pickQueue.slice();\n        this.pickQueue = [];\n        this.callRefTimerUnref();\n        for (const call of queueCopy) {\n          call.doPick();\n        }\n        this.updateState(connectivityState);\n      },\n      requestReresolution: () => {\n        // This should never be called.\n        throw new Error('Resolving load balancer should never call requestReresolution');\n      },\n      addChannelzChild: child => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.refChild(child);\n        }\n      },\n      removeChannelzChild: child => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.unrefChild(child);\n        }\n      }\n    };\n    this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options, (serviceConfig, configSelector) => {\n      if (serviceConfig.retryThrottling) {\n        RETRY_THROTTLER_MAP.set(this.getTarget(), new retrying_call_1.RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));\n      } else {\n        RETRY_THROTTLER_MAP.delete(this.getTarget());\n      }\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Address resolution succeeded');\n      }\n      this.configSelector = configSelector;\n      this.currentResolutionError = null;\n      /* We process the queue asynchronously to ensure that the corresponding\n       * load balancer update has completed. */\n      process.nextTick(() => {\n        const localQueue = this.configSelectionQueue;\n        this.configSelectionQueue = [];\n        this.callRefTimerUnref();\n        for (const call of localQueue) {\n          call.getConfig();\n        }\n        this.configSelectionQueue = [];\n      });\n    }, status => {\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_WARNING', 'Address resolution failed with code ' + status.code + ' and details \"' + status.details + '\"');\n      }\n      if (this.configSelectionQueue.length > 0) {\n        this.trace('Name resolution failed with calls queued for config selection');\n      }\n      if (this.configSelector === null) {\n        this.currentResolutionError = Object.assign(Object.assign({}, (0, control_plane_status_1.restrictControlPlaneStatusCode)(status.code, status.details)), {\n          metadata: status.metadata\n        });\n      }\n      const localQueue = this.configSelectionQueue;\n      this.configSelectionQueue = [];\n      this.callRefTimerUnref();\n      for (const call of localQueue) {\n        call.reportResolverError(status);\n      }\n    });\n    this.filterStackFactory = new filter_stack_1.FilterStackFactory([new max_message_size_filter_1.MaxMessageSizeFilterFactory(this.options), new compression_filter_1.CompressionFilterFactory(this, this.options)]);\n    this.trace('Channel constructed with options ' + JSON.stringify(options, undefined, 2));\n    const error = new Error();\n    (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'channel_stacktrace', '(' + this.channelzRef.id + ') ' + 'Channel constructed \\n' + ((_g = error.stack) === null || _g === void 0 ? void 0 : _g.substring(error.stack.indexOf('\\n') + 1)));\n  }\n  getChannelzInfo() {\n    return {\n      target: this.originalTarget,\n      state: this.connectivityState,\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      children: this.childrenTracker.getChildLists()\n    };\n  }\n  trace(text, verbosityOverride) {\n    (0, logging_1.trace)(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, 'channel', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + text);\n  }\n  callRefTimerRef() {\n    var _a, _b, _c, _d;\n    // If the hasRef function does not exist, always run the code\n    if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n      this.trace('callRefTimer.ref | configSelectionQueue.length=' + this.configSelectionQueue.length + ' pickQueue.length=' + this.pickQueue.length);\n      (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n  }\n  callRefTimerUnref() {\n    var _a, _b;\n    // If the hasRef function does not exist, always run the code\n    if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {\n      this.trace('callRefTimer.unref | configSelectionQueue.length=' + this.configSelectionQueue.length + ' pickQueue.length=' + this.pickQueue.length);\n      (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n  }\n  removeConnectivityStateWatcher(watcherObject) {\n    const watcherIndex = this.connectivityStateWatchers.findIndex(value => value === watcherObject);\n    if (watcherIndex >= 0) {\n      this.connectivityStateWatchers.splice(watcherIndex, 1);\n    }\n  }\n  updateState(newState) {\n    (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'connectivity_state', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + connectivity_state_1.ConnectivityState[this.connectivityState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', connectivity_state_1.ConnectivityState[this.connectivityState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    }\n    this.connectivityState = newState;\n    const watchersCopy = this.connectivityStateWatchers.slice();\n    for (const watcherObject of watchersCopy) {\n      if (newState !== watcherObject.currentState) {\n        if (watcherObject.timer) {\n          clearTimeout(watcherObject.timer);\n        }\n        this.removeConnectivityStateWatcher(watcherObject);\n        watcherObject.callback();\n      }\n    }\n    if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n      this.currentResolutionError = null;\n    }\n  }\n  throttleKeepalive(newKeepaliveTime) {\n    if (newKeepaliveTime > this.keepaliveTime) {\n      this.keepaliveTime = newKeepaliveTime;\n      for (const wrappedSubchannel of this.wrappedSubchannels) {\n        wrappedSubchannel.throttleKeepalive(newKeepaliveTime);\n      }\n    }\n  }\n  removeWrappedSubchannel(wrappedSubchannel) {\n    this.wrappedSubchannels.delete(wrappedSubchannel);\n  }\n  doPick(metadata, extraPickInfo) {\n    return this.currentPicker.pick({\n      metadata: metadata,\n      extraPickInfo: extraPickInfo\n    });\n  }\n  queueCallForPick(call) {\n    this.pickQueue.push(call);\n    this.callRefTimerRef();\n  }\n  getConfig(method, metadata) {\n    this.resolvingLoadBalancer.exitIdle();\n    if (this.configSelector) {\n      return {\n        type: 'SUCCESS',\n        config: this.configSelector(method, metadata)\n      };\n    } else {\n      if (this.currentResolutionError) {\n        return {\n          type: 'ERROR',\n          error: this.currentResolutionError\n        };\n      } else {\n        return {\n          type: 'NONE'\n        };\n      }\n    }\n  }\n  queueCallForConfig(call) {\n    this.configSelectionQueue.push(call);\n    this.callRefTimerRef();\n  }\n  createLoadBalancingCall(callConfig, method, host, credentials, deadline) {\n    const callNumber = (0, call_number_1.getNextCallNumber)();\n    this.trace('createLoadBalancingCall [' + callNumber + '] method=\"' + method + '\"');\n    return new load_balancing_call_1.LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);\n  }\n  createRetryingCall(callConfig, method, host, credentials, deadline) {\n    const callNumber = (0, call_number_1.getNextCallNumber)();\n    this.trace('createRetryingCall [' + callNumber + '] method=\"' + method + '\"');\n    return new retrying_call_1.RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()));\n  }\n  createInnerCall(callConfig, method, host, credentials, deadline) {\n    // Create a RetryingCall if retries are enabled\n    if (this.options['grpc.enable_retries'] === 0) {\n      return this.createLoadBalancingCall(callConfig, method, host, credentials, deadline);\n    } else {\n      return this.createRetryingCall(callConfig, method, host, credentials, deadline);\n    }\n  }\n  createResolvingCall(method, deadline, host, parentCall, propagateFlags) {\n    const callNumber = (0, call_number_1.getNextCallNumber)();\n    this.trace('createResolvingCall [' + callNumber + '] method=\"' + method + '\", deadline=' + (0, deadline_1.deadlineToString)(deadline));\n    const finalOptions = {\n      deadline: deadline,\n      flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,\n      host: host !== null && host !== void 0 ? host : this.defaultAuthority,\n      parentCall: parentCall\n    };\n    const call = new resolving_call_1.ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), this.credentials._getCallCredentials(), callNumber);\n    if (this.channelzEnabled) {\n      this.callTracker.addCallStarted();\n      call.addStatusWatcher(status => {\n        if (status.code === constants_1.Status.OK) {\n          this.callTracker.addCallSucceeded();\n        } else {\n          this.callTracker.addCallFailed();\n        }\n      });\n    }\n    return call;\n  }\n  close() {\n    this.resolvingLoadBalancer.destroy();\n    this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);\n    clearInterval(this.callRefTimer);\n    if (this.channelzEnabled) {\n      (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n    }\n    this.subchannelPool.unrefUnusedSubchannels();\n  }\n  getTarget() {\n    return (0, uri_parser_1.uriToString)(this.target);\n  }\n  getConnectivityState(tryToConnect) {\n    const connectivityState = this.connectivityState;\n    if (tryToConnect) {\n      this.resolvingLoadBalancer.exitIdle();\n    }\n    return connectivityState;\n  }\n  watchConnectivityState(currentState, deadline, callback) {\n    if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    let timer = null;\n    if (deadline !== Infinity) {\n      const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);\n      const now = new Date();\n      if (deadline === -Infinity || deadlineDate <= now) {\n        process.nextTick(callback, new Error('Deadline passed without connectivity state change'));\n        return;\n      }\n      timer = setTimeout(() => {\n        this.removeConnectivityStateWatcher(watcherObject);\n        callback(new Error('Deadline passed without connectivity state change'));\n      }, deadlineDate.getTime() - now.getTime());\n    }\n    const watcherObject = {\n      currentState,\n      callback,\n      timer\n    };\n    this.connectivityStateWatchers.push(watcherObject);\n  }\n  /**\n   * Get the channelz reference object for this channel. The returned value is\n   * garbage if channelz is disabled for this channel.\n   * @returns\n   */\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n  createCall(method, deadline, host, parentCall, propagateFlags) {\n    if (typeof method !== 'string') {\n      throw new TypeError('Channel#createCall: method must be a string');\n    }\n    if (!(typeof deadline === 'number' || deadline instanceof Date)) {\n      throw new TypeError('Channel#createCall: deadline must be a number or Date');\n    }\n    if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);\n  }\n}\nexports.InternalChannel = InternalChannel;","map":{"version":3,"names":["channel_credentials_1","require","resolving_load_balancer_1","subchannel_pool_1","picker_1","constants_1","filter_stack_1","compression_filter_1","resolver_1","logging_1","max_message_size_filter_1","http_proxy_1","uri_parser_1","connectivity_state_1","channelz_1","load_balancing_call_1","deadline_1","resolving_call_1","call_number_1","control_plane_status_1","retrying_call_1","subchannel_interface_1","MAX_TIMEOUT_TIME","RETRY_THROTTLER_MAP","Map","DEFAULT_RETRY_BUFFER_SIZE_BYTES","DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES","ChannelSubchannelWrapper","BaseSubchannelWrapper","constructor","childSubchannel","channel","refCount","subchannelStateListener","subchannel","previousState","newState","keepaliveTime","throttleKeepalive","addConnectivityStateListener","ref","child","unref","removeConnectivityStateListener","removeWrappedSubchannel","InternalChannel","target","credentials","options","connectivityState","ConnectivityState","IDLE","currentPicker","UnavailablePicker","configSelectionQueue","pickQueue","connectivityStateWatchers","configSelector","currentResolutionError","wrappedSubchannels","Set","channelzEnabled","callTracker","ChannelzCallTracker","childrenTracker","ChannelzChildrenTracker","TypeError","ChannelCredentials","originalTarget","originalTargetUri","parseUri","Error","defaultSchemeMapResult","mapUriDefaultScheme","callRefTimer","setInterval","_b","_a","call","channelzTrace","ChannelzTrace","channelzRef","registerChannelzChannel","getChannelzInfo","addTrace","defaultAuthority","getDefaultAuthority","proxyMapResult","mapProxyName","Object","assign","extraOptions","subchannelPool","getSubchannelPool","_c","retryBufferTracker","MessageBufferTracker","_d","_e","_f","channelControlHelper","createSubchannel","subchannelAddress","subchannelArgs","getOrCreateSubchannel","getChannelzRef","wrappedSubchannel","add","updateState","picker","queueCopy","slice","callRefTimerUnref","doPick","requestReresolution","addChannelzChild","refChild","removeChannelzChild","unrefChild","resolvingLoadBalancer","ResolvingLoadBalancer","serviceConfig","retryThrottling","set","getTarget","RetryThrottler","maxTokens","tokenRatio","get","delete","process","nextTick","localQueue","getConfig","status","code","details","length","trace","restrictControlPlaneStatusCode","metadata","reportResolverError","filterStackFactory","FilterStackFactory","MaxMessageSizeFilterFactory","CompressionFilterFactory","JSON","stringify","undefined","error","LogVerbosity","DEBUG","id","_g","stack","substring","indexOf","state","children","getChildLists","text","verbosityOverride","uriToString","callRefTimerRef","hasRef","removeConnectivityStateWatcher","watcherObject","watcherIndex","findIndex","value","splice","watchersCopy","currentState","timer","clearTimeout","callback","TRANSIENT_FAILURE","newKeepaliveTime","extraPickInfo","pick","queueCallForPick","push","method","exitIdle","type","config","queueCallForConfig","createLoadBalancingCall","callConfig","host","deadline","callNumber","getNextCallNumber","LoadBalancingCall","createRetryingCall","RetryingCall","createInnerCall","createResolvingCall","parentCall","propagateFlags","deadlineToString","finalOptions","flags","Propagate","DEFAULTS","ResolvingCall","clone","_getCallCredentials","addCallStarted","addStatusWatcher","Status","OK","addCallSucceeded","addCallFailed","close","destroy","SHUTDOWN","clearInterval","unregisterChannelzRef","unrefUnusedSubchannels","getConnectivityState","tryToConnect","watchConnectivityState","Infinity","deadlineDate","Date","now","setTimeout","getTime","createCall","exports"],"sources":["/Users/usmanchaudhry/Documents/GitHub/weather-app/face-recognition/node_modules/@grpc/grpc-js/src/internal-channel.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { ChannelCredentials } from './channel-credentials';\nimport { ChannelOptions } from './channel-options';\nimport { ResolvingLoadBalancer } from './resolving-load-balancer';\nimport { SubchannelPool, getSubchannelPool } from './subchannel-pool';\nimport { ChannelControlHelper } from './load-balancer';\nimport { UnavailablePicker, Picker, PickResultType } from './picker';\nimport { Metadata } from './metadata';\nimport { Status, LogVerbosity, Propagate } from './constants';\nimport { FilterStackFactory } from './filter-stack';\nimport { CompressionFilterFactory } from './compression-filter';\nimport {\n  CallConfig,\n  ConfigSelector,\n  getDefaultAuthority,\n  mapUriDefaultScheme,\n} from './resolver';\nimport { trace, log } from './logging';\nimport { SubchannelAddress } from './subchannel-address';\nimport { MaxMessageSizeFilterFactory } from './max-message-size-filter';\nimport { mapProxyName } from './http_proxy';\nimport { GrpcUri, parseUri, splitHostPort, uriToString } from './uri-parser';\nimport { ServerSurfaceCall } from './server-call';\nimport { Filter } from './filter';\n\nimport { ConnectivityState } from './connectivity-state';\nimport { ChannelInfo, ChannelRef, ChannelzCallTracker, ChannelzChildrenTracker, ChannelzTrace, registerChannelzChannel, SubchannelRef, unregisterChannelzRef } from './channelz';\nimport { Subchannel } from './subchannel';\nimport { LoadBalancingCall } from './load-balancing-call';\nimport { CallCredentials } from './call-credentials';\nimport { Call, CallStreamOptions, InterceptingListener, MessageContext, StatusObject } from './call-interface';\nimport { SubchannelCall } from './subchannel-call';\nimport { Deadline, deadlineToString, getDeadlineTimeoutString } from './deadline';\nimport { ResolvingCall } from './resolving-call';\nimport { getNextCallNumber } from './call-number';\nimport { restrictControlPlaneStatusCode } from './control-plane-status';\nimport { MessageBufferTracker, RetryingCall, RetryThrottler } from './retrying-call';\nimport { BaseSubchannelWrapper, ConnectivityStateListener, SubchannelInterface } from './subchannel-interface';\n\n/**\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\n */\nconst MAX_TIMEOUT_TIME = 2147483647;\n\ninterface ConnectivityStateWatcher {\n  currentState: ConnectivityState;\n  timer: NodeJS.Timeout | null;\n  callback: (error?: Error) => void;\n}\n\ninterface NoneConfigResult {\n  type: 'NONE';\n}\n\ninterface SuccessConfigResult {\n  type: 'SUCCESS';\n  config: CallConfig;\n}\n\ninterface ErrorConfigResult {\n  type: 'ERROR';\n  error: StatusObject;\n}\n\ntype GetConfigResult = NoneConfigResult | SuccessConfigResult | ErrorConfigResult;\n\nconst RETRY_THROTTLER_MAP: Map<string, RetryThrottler> = new Map();\n\nconst DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1<<24; // 16 MB\nconst DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1<<20; // 1 MB\n\nclass ChannelSubchannelWrapper extends BaseSubchannelWrapper implements SubchannelInterface {\n  private refCount = 0;\n  private subchannelStateListener: ConnectivityStateListener;\n  constructor(childSubchannel: SubchannelInterface, private channel: InternalChannel) {\n    super(childSubchannel);\n    this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime) => {\n      channel.throttleKeepalive(keepaliveTime);\n    };\n    childSubchannel.addConnectivityStateListener(this.subchannelStateListener);\n  }\n\n  ref(): void {\n    this.child.ref();\n    this.refCount += 1;\n  }\n\n  unref(): void {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      this.child.removeConnectivityStateListener(this.subchannelStateListener);\n      this.channel.removeWrappedSubchannel(this);\n    }\n  }\n}\n\nexport class InternalChannel {\n  \n  private resolvingLoadBalancer: ResolvingLoadBalancer;\n  private subchannelPool: SubchannelPool;\n  private connectivityState: ConnectivityState = ConnectivityState.IDLE;\n  private currentPicker: Picker = new UnavailablePicker();\n  /**\n   * Calls queued up to get a call config. Should only be populated before the\n   * first time the resolver returns a result, which includes the ConfigSelector.\n   */\n  private configSelectionQueue: ResolvingCall[] = [];\n  private pickQueue: LoadBalancingCall[] = [];\n  private connectivityStateWatchers: ConnectivityStateWatcher[] = [];\n  private defaultAuthority: string;\n  private filterStackFactory: FilterStackFactory;\n  private target: GrpcUri;\n  /**\n   * This timer does not do anything on its own. Its purpose is to hold the\n   * event loop open while there are any pending calls for the channel that\n   * have not yet been assigned to specific subchannels. In other words,\n   * the invariant is that callRefTimer is reffed if and only if pickQueue\n   * is non-empty.\n   */\n  private callRefTimer: NodeJS.Timer;\n  private configSelector: ConfigSelector | null = null;\n  /**\n   * This is the error from the name resolver if it failed most recently. It\n   * is only used to end calls that start while there is no config selector\n   * and the name resolver is in backoff, so it should be nulled if\n   * configSelector becomes set or the channel state becomes anything other\n   * than TRANSIENT_FAILURE.\n   */\n  private currentResolutionError: StatusObject | null = null;\n  private retryBufferTracker: MessageBufferTracker;\n  private keepaliveTime: number;\n  private wrappedSubchannels: Set<ChannelSubchannelWrapper> = new Set();\n\n  // Channelz info\n  private readonly channelzEnabled: boolean = true;\n  private originalTarget: string;\n  private channelzRef: ChannelRef;\n  private channelzTrace: ChannelzTrace;\n  private callTracker = new ChannelzCallTracker();\n  private childrenTracker = new ChannelzChildrenTracker();\n\n  constructor(\n    target: string,\n    private readonly credentials: ChannelCredentials,\n    private readonly options: ChannelOptions\n  ) {\n    if (typeof target !== 'string') {\n      throw new TypeError('Channel target must be a string');\n    }\n    if (!(credentials instanceof ChannelCredentials)) {\n      throw new TypeError(\n        'Channel credentials must be a ChannelCredentials object'\n      );\n    }\n    if (options) {\n      if (typeof options !== 'object') {\n        throw new TypeError('Channel options must be an object');\n      }\n    }\n    this.originalTarget = target;\n    const originalTargetUri = parseUri(target);\n    if (originalTargetUri === null) {\n      throw new Error(`Could not parse target name \"${target}\"`);\n    }\n    /* This ensures that the target has a scheme that is registered with the\n     * resolver */\n    const defaultSchemeMapResult = mapUriDefaultScheme(originalTargetUri);\n    if (defaultSchemeMapResult === null) {\n      throw new Error(\n        `Could not find a default scheme for target name \"${target}\"`\n      );\n    }\n\n    this.callRefTimer = setInterval(() => {}, MAX_TIMEOUT_TIME);\n    this.callRefTimer.unref?.();\n\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n\n    this.channelzTrace = new ChannelzTrace();\n    this.channelzRef = registerChannelzChannel(target, () => this.getChannelzInfo(), this.channelzEnabled);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Channel created');\n    }\n\n    if (this.options['grpc.default_authority']) {\n      this.defaultAuthority = this.options['grpc.default_authority'] as string;\n    } else {\n      this.defaultAuthority = getDefaultAuthority(defaultSchemeMapResult);\n    }\n    const proxyMapResult = mapProxyName(defaultSchemeMapResult, options);\n    this.target = proxyMapResult.target;\n    this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\n\n    /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\n     * the grpc.use_local_subchannel_pool channel option means. */\n    this.subchannelPool = getSubchannelPool(\n      (options['grpc.use_local_subchannel_pool'] ?? 0) === 0\n    );\n    this.retryBufferTracker = new MessageBufferTracker(\n      options['grpc.retry_buffer_size'] ?? DEFAULT_RETRY_BUFFER_SIZE_BYTES,\n      options['grpc.per_rpc_retry_buffer_size'] ?? DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES\n    );\n    this.keepaliveTime = options['grpc.keepalive_time_ms'] ?? -1;\n    const channelControlHelper: ChannelControlHelper = {\n      createSubchannel: (\n        subchannelAddress: SubchannelAddress,\n        subchannelArgs: ChannelOptions\n      ) => {\n        const subchannel = this.subchannelPool.getOrCreateSubchannel(\n          this.target,\n          subchannelAddress,\n          Object.assign({}, this.options, subchannelArgs),\n          this.credentials\n        );\n        subchannel.throttleKeepalive(this.keepaliveTime);\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Created subchannel or used existing subchannel', subchannel.getChannelzRef());\n        }\n        const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);\n        this.wrappedSubchannels.add(wrappedSubchannel);\n        return wrappedSubchannel;\n      },\n      updateState: (connectivityState: ConnectivityState, picker: Picker) => {\n        this.currentPicker = picker;\n        const queueCopy = this.pickQueue.slice();\n        this.pickQueue = [];\n        this.callRefTimerUnref();\n        for (const call of queueCopy) {\n          call.doPick();\n        }\n        this.updateState(connectivityState);\n      },\n      requestReresolution: () => {\n        // This should never be called.\n        throw new Error(\n          'Resolving load balancer should never call requestReresolution'\n        );\n      },\n      addChannelzChild: (child: ChannelRef | SubchannelRef) => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.refChild(child);\n        }\n      },\n      removeChannelzChild: (child: ChannelRef | SubchannelRef) => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.unrefChild(child);\n        }\n      }\n    };\n    this.resolvingLoadBalancer = new ResolvingLoadBalancer(\n      this.target,\n      channelControlHelper,\n      options,\n      (serviceConfig, configSelector) => {\n        if (serviceConfig.retryThrottling) {\n          RETRY_THROTTLER_MAP.set(this.getTarget(), new RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));\n        } else {\n          RETRY_THROTTLER_MAP.delete(this.getTarget());\n        }\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Address resolution succeeded');\n        }\n        this.configSelector = configSelector;\n        this.currentResolutionError = null;\n        /* We process the queue asynchronously to ensure that the corresponding\n         * load balancer update has completed. */\n        process.nextTick(() => {\n          const localQueue = this.configSelectionQueue;\n          this.configSelectionQueue = [];\n          this.callRefTimerUnref();\n          for (const call of localQueue) {\n            call.getConfig();\n          }\n          this.configSelectionQueue = [];\n        });\n\n      },\n      (status) => {\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_WARNING', 'Address resolution failed with code ' + status.code + ' and details \"' + status.details + '\"');\n        }\n        if (this.configSelectionQueue.length > 0) {\n          this.trace('Name resolution failed with calls queued for config selection');\n        }\n        if (this.configSelector === null) {\n          this.currentResolutionError = {...restrictControlPlaneStatusCode(status.code, status.details), metadata: status.metadata};\n        }\n        const localQueue = this.configSelectionQueue;\n        this.configSelectionQueue = [];\n        this.callRefTimerUnref();\n        for (const call of localQueue) {\n          call.reportResolverError(status);\n        }\n      }\n    );\n    this.filterStackFactory = new FilterStackFactory([\n      new MaxMessageSizeFilterFactory(this.options),\n      new CompressionFilterFactory(this, this.options),\n    ]);\n    this.trace('Channel constructed with options ' + JSON.stringify(options, undefined, 2));\n    const error = new Error();\n    trace(LogVerbosity.DEBUG, 'channel_stacktrace', '(' + this.channelzRef.id + ') ' + 'Channel constructed \\n' + error.stack?.substring(error.stack.indexOf('\\n')+1));\n  }\n\n  private getChannelzInfo(): ChannelInfo {\n    return {\n      target: this.originalTarget,\n      state: this.connectivityState,\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      children: this.childrenTracker.getChildLists()\n    };\n  }\n\n  private trace(text: string, verbosityOverride?: LogVerbosity) {\n    trace(verbosityOverride ?? LogVerbosity.DEBUG, 'channel', '(' + this.channelzRef.id + ') ' + uriToString(this.target) + ' ' + text);\n  }\n\n  private callRefTimerRef() {\n    // If the hasRef function does not exist, always run the code\n    if (!this.callRefTimer.hasRef?.()) {\n      this.trace(\n        'callRefTimer.ref | configSelectionQueue.length=' +\n          this.configSelectionQueue.length +\n          ' pickQueue.length=' +\n          this.pickQueue.length\n      );\n      this.callRefTimer.ref?.();\n    }\n  }\n\n  private callRefTimerUnref() {\n    // If the hasRef function does not exist, always run the code\n    if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {\n      this.trace(\n        'callRefTimer.unref | configSelectionQueue.length=' +\n          this.configSelectionQueue.length +\n          ' pickQueue.length=' +\n          this.pickQueue.length\n      );\n      this.callRefTimer.unref?.();\n    }\n  }\n\n  private removeConnectivityStateWatcher(\n    watcherObject: ConnectivityStateWatcher\n  ) {\n    const watcherIndex = this.connectivityStateWatchers.findIndex(\n      (value) => value === watcherObject\n    );\n    if (watcherIndex >= 0) {\n      this.connectivityStateWatchers.splice(watcherIndex, 1);\n    }\n  }\n\n  private updateState(newState: ConnectivityState): void {\n    trace(\n      LogVerbosity.DEBUG,\n      'connectivity_state',\n      '(' + this.channelzRef.id + ') ' + \n        uriToString(this.target) +\n        ' ' +\n        ConnectivityState[this.connectivityState] +\n        ' -> ' +\n        ConnectivityState[newState]\n    );\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', ConnectivityState[this.connectivityState] + ' -> ' + ConnectivityState[newState]);\n    }\n    this.connectivityState = newState;\n    const watchersCopy = this.connectivityStateWatchers.slice();\n    for (const watcherObject of watchersCopy) {\n      if (newState !== watcherObject.currentState) {\n        if (watcherObject.timer) {\n          clearTimeout(watcherObject.timer);\n        }\n        this.removeConnectivityStateWatcher(watcherObject);\n        watcherObject.callback();\n      }\n    }\n    if (newState !== ConnectivityState.TRANSIENT_FAILURE) {\n      this.currentResolutionError = null;\n    }\n  }\n\n  throttleKeepalive(newKeepaliveTime: number) {\n    if (newKeepaliveTime > this.keepaliveTime) {\n      this.keepaliveTime = newKeepaliveTime;\n      for (const wrappedSubchannel of this.wrappedSubchannels) {\n        wrappedSubchannel.throttleKeepalive(newKeepaliveTime);\n      }\n    }\n  }\n\n  removeWrappedSubchannel(wrappedSubchannel: ChannelSubchannelWrapper) {\n    this.wrappedSubchannels.delete(wrappedSubchannel);\n  }\n\n  doPick(metadata: Metadata, extraPickInfo: {[key: string]: string}) {\n    return this.currentPicker.pick({metadata: metadata, extraPickInfo: extraPickInfo});\n  }\n\n  queueCallForPick(call: LoadBalancingCall) {\n    this.pickQueue.push(call);\n    this.callRefTimerRef();\n  }\n\n  getConfig(method: string, metadata: Metadata): GetConfigResult {\n    this.resolvingLoadBalancer.exitIdle();\n    if (this.configSelector) {\n      return {\n        type: 'SUCCESS',\n        config: this.configSelector(method, metadata)\n      };\n    } else {\n      if (this.currentResolutionError) {\n        return {\n          type: 'ERROR',\n          error: this.currentResolutionError\n        }\n      } else {\n        return {\n          type: 'NONE'\n        }\n      }\n    }\n  }\n\n  queueCallForConfig(call: ResolvingCall) {\n    this.configSelectionQueue.push(call);\n    this.callRefTimerRef();\n  }\n\n  createLoadBalancingCall(\n    callConfig: CallConfig,\n    method: string,\n    host: string,\n    credentials: CallCredentials,\n    deadline: Deadline\n  ): LoadBalancingCall {\n    const callNumber = getNextCallNumber();\n    this.trace(\n      'createLoadBalancingCall [' +\n        callNumber +\n        '] method=\"' +\n        method +\n        '\"'\n    );\n    return new LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);\n  }\n\n  createRetryingCall(\n    callConfig: CallConfig,\n    method: string,\n    host: string,\n    credentials: CallCredentials,\n    deadline: Deadline\n  ): RetryingCall {\n    const callNumber = getNextCallNumber();\n    this.trace(\n      'createRetryingCall [' +\n        callNumber +\n        '] method=\"' +\n        method +\n        '\"'\n    );\n    return new RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()))\n  }\n\n  createInnerCall(\n    callConfig: CallConfig,\n    method: string,\n    host: string,\n    credentials: CallCredentials,\n    deadline: Deadline\n  ): Call {\n    // Create a RetryingCall if retries are enabled\n    if (this.options['grpc.enable_retries'] === 0) {\n      return this.createLoadBalancingCall(callConfig, method, host, credentials, deadline);\n    } else {\n      return this.createRetryingCall(callConfig, method, host, credentials, deadline);\n    }\n  }\n\n  createResolvingCall(\n    method: string,\n    deadline: Deadline,\n    host: string | null | undefined,\n    parentCall: ServerSurfaceCall | null,\n    propagateFlags: number | null | undefined\n  ): ResolvingCall {\n    const callNumber = getNextCallNumber();\n    this.trace(\n      'createResolvingCall [' +\n        callNumber +\n        '] method=\"' +\n        method +\n        '\", deadline=' +\n        deadlineToString(deadline)\n    );\n    const finalOptions: CallStreamOptions = {\n      deadline: deadline,\n      flags: propagateFlags ?? Propagate.DEFAULTS,\n      host: host ?? this.defaultAuthority,\n      parentCall: parentCall,\n    };\n\n    const call = new ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), this.credentials._getCallCredentials(), callNumber);\n\n    if (this.channelzEnabled) {\n      this.callTracker.addCallStarted();\n      call.addStatusWatcher(status => {\n        if (status.code === Status.OK) {\n          this.callTracker.addCallSucceeded();\n        } else {\n          this.callTracker.addCallFailed();\n        }\n      });\n    }\n    return call;\n\n  }\n\n  close() {\n    this.resolvingLoadBalancer.destroy();\n    this.updateState(ConnectivityState.SHUTDOWN);\n    clearInterval(this.callRefTimer);\n    if (this.channelzEnabled) {\n      unregisterChannelzRef(this.channelzRef);\n    }\n\n    this.subchannelPool.unrefUnusedSubchannels();\n  }\n\n  getTarget() {\n    return uriToString(this.target);\n  }\n\n  getConnectivityState(tryToConnect: boolean) {\n    const connectivityState = this.connectivityState;\n    if (tryToConnect) {\n      this.resolvingLoadBalancer.exitIdle();\n    }\n    return connectivityState;\n  }\n\n  watchConnectivityState(\n    currentState: ConnectivityState,\n    deadline: Date | number,\n    callback: (error?: Error) => void\n  ): void {\n    if (this.connectivityState === ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    let timer = null;\n    if (deadline !== Infinity) {\n      const deadlineDate: Date =\n        deadline instanceof Date ? deadline : new Date(deadline);\n      const now = new Date();\n      if (deadline === -Infinity || deadlineDate <= now) {\n        process.nextTick(\n          callback,\n          new Error('Deadline passed without connectivity state change')\n        );\n        return;\n      }\n      timer = setTimeout(() => {\n        this.removeConnectivityStateWatcher(watcherObject);\n        callback(\n          new Error('Deadline passed without connectivity state change')\n        );\n      }, deadlineDate.getTime() - now.getTime());\n    }\n    const watcherObject = {\n      currentState,\n      callback,\n      timer,\n    };\n    this.connectivityStateWatchers.push(watcherObject);\n  }\n\n  /**\n   * Get the channelz reference object for this channel. The returned value is\n   * garbage if channelz is disabled for this channel.\n   * @returns \n   */\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n\n  createCall(\n    method: string,\n    deadline: Deadline,\n    host: string | null | undefined,\n    parentCall: ServerSurfaceCall | null,\n    propagateFlags: number | null | undefined\n  ): Call {\n    if (typeof method !== 'string') {\n      throw new TypeError('Channel#createCall: method must be a string');\n    }\n    if (!(typeof deadline === 'number' || deadline instanceof Date)) {\n      throw new TypeError(\n        'Channel#createCall: deadline must be a number or Date'\n      );\n    }\n    if (this.connectivityState === ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}