{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompressionFilterFactory = exports.CompressionFilter = void 0;\nconst zlib = require(\"zlib\");\nconst compression_algorithms_1 = require(\"./compression-algorithms\");\nconst constants_1 = require(\"./constants\");\nconst filter_1 = require(\"./filter\");\nconst logging = require(\"./logging\");\nconst isCompressionAlgorithmKey = key => {\n  return typeof key === 'number' && typeof compression_algorithms_1.CompressionAlgorithms[key] === 'string';\n};\nclass CompressionHandler {\n  /**\n   * @param message Raw uncompressed message bytes\n   * @param compress Indicates whether the message should be compressed\n   * @return Framed message, compressed if applicable\n   */\n  async writeMessage(message, compress) {\n    let messageBuffer = message;\n    if (compress) {\n      messageBuffer = await this.compressMessage(messageBuffer);\n    }\n    const output = Buffer.allocUnsafe(messageBuffer.length + 5);\n    output.writeUInt8(compress ? 1 : 0, 0);\n    output.writeUInt32BE(messageBuffer.length, 1);\n    messageBuffer.copy(output, 5);\n    return output;\n  }\n  /**\n   * @param data Framed message, possibly compressed\n   * @return Uncompressed message\n   */\n  async readMessage(data) {\n    const compressed = data.readUInt8(0) === 1;\n    let messageBuffer = data.slice(5);\n    if (compressed) {\n      messageBuffer = await this.decompressMessage(messageBuffer);\n    }\n    return messageBuffer;\n  }\n}\nclass IdentityHandler extends CompressionHandler {\n  async compressMessage(message) {\n    return message;\n  }\n  async writeMessage(message, compress) {\n    const output = Buffer.allocUnsafe(message.length + 5);\n    /* With \"identity\" compression, messages should always be marked as\n     * uncompressed */\n    output.writeUInt8(0, 0);\n    output.writeUInt32BE(message.length, 1);\n    message.copy(output, 5);\n    return output;\n  }\n  decompressMessage(message) {\n    return Promise.reject(new Error('Received compressed message but \"grpc-encoding\" header was identity'));\n  }\n}\nclass DeflateHandler extends CompressionHandler {\n  compressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.deflate(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n  decompressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.inflate(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n}\nclass GzipHandler extends CompressionHandler {\n  compressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.gzip(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n  decompressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.unzip(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n}\nclass UnknownHandler extends CompressionHandler {\n  constructor(compressionName) {\n    super();\n    this.compressionName = compressionName;\n  }\n  compressMessage(message) {\n    return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));\n  }\n  decompressMessage(message) {\n    // This should be unreachable\n    return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));\n  }\n}\nfunction getCompressionHandler(compressionName) {\n  switch (compressionName) {\n    case 'identity':\n      return new IdentityHandler();\n    case 'deflate':\n      return new DeflateHandler();\n    case 'gzip':\n      return new GzipHandler();\n    default:\n      return new UnknownHandler(compressionName);\n  }\n}\nclass CompressionFilter extends filter_1.BaseFilter {\n  constructor(channelOptions, sharedFilterConfig) {\n    var _a;\n    super();\n    this.sharedFilterConfig = sharedFilterConfig;\n    this.sendCompression = new IdentityHandler();\n    this.receiveCompression = new IdentityHandler();\n    this.currentCompressionAlgorithm = 'identity';\n    const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];\n    if (compressionAlgorithmKey !== undefined) {\n      if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\n        const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];\n        const serverSupportedEncodings = (_a = sharedFilterConfig.serverSupportedEncodingHeader) === null || _a === void 0 ? void 0 : _a.split(',');\n        /**\n         * There are two possible situations here:\n         * 1) We don't have any info yet from the server about what compression it supports\n         *    In that case we should just use what the client tells us to use\n         * 2) We've previously received a response from the server including a grpc-accept-encoding header\n         *    In that case we only want to use the encoding chosen by the client if the server supports it\n         */\n        if (!serverSupportedEncodings || serverSupportedEncodings.includes(clientSelectedEncoding)) {\n          this.currentCompressionAlgorithm = clientSelectedEncoding;\n          this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm);\n        }\n      } else {\n        logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\n      }\n    }\n  }\n  async sendMetadata(metadata) {\n    const headers = await metadata;\n    headers.set('grpc-accept-encoding', 'identity,deflate,gzip');\n    headers.set('accept-encoding', 'identity');\n    // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\n    if (this.currentCompressionAlgorithm === 'identity') {\n      headers.remove('grpc-encoding');\n    } else {\n      headers.set('grpc-encoding', this.currentCompressionAlgorithm);\n    }\n    return headers;\n  }\n  receiveMetadata(metadata) {\n    const receiveEncoding = metadata.get('grpc-encoding');\n    if (receiveEncoding.length > 0) {\n      const encoding = receiveEncoding[0];\n      if (typeof encoding === 'string') {\n        this.receiveCompression = getCompressionHandler(encoding);\n      }\n    }\n    metadata.remove('grpc-encoding');\n    /* Check to see if the compression we're using to send messages is supported by the server\n     * If not, reset the sendCompression filter and have it use the default IdentityHandler */\n    const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0];\n    if (serverSupportedEncodingsHeader) {\n      this.sharedFilterConfig.serverSupportedEncodingHeader = serverSupportedEncodingsHeader;\n      const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');\n      if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\n        this.sendCompression = new IdentityHandler();\n        this.currentCompressionAlgorithm = 'identity';\n      }\n    }\n    metadata.remove('grpc-accept-encoding');\n    return metadata;\n  }\n  async sendMessage(message) {\n    var _a;\n    /* This filter is special. The input message is the bare message bytes,\n     * and the output is a framed and possibly compressed message. For this\n     * reason, this filter should be at the bottom of the filter stack */\n    const resolvedMessage = await message;\n    let compress;\n    if (this.sendCompression instanceof IdentityHandler) {\n      compress = false;\n    } else {\n      compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2 /* WriteFlags.NoCompress */) === 0;\n    }\n    return {\n      message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),\n      flags: resolvedMessage.flags\n    };\n  }\n  async receiveMessage(message) {\n    /* This filter is also special. The input message is framed and possibly\n     * compressed, and the output message is deframed and uncompressed. So\n     * this is another reason that this filter should be at the bottom of the\n     * filter stack. */\n    return this.receiveCompression.readMessage(await message);\n  }\n}\nexports.CompressionFilter = CompressionFilter;\nclass CompressionFilterFactory {\n  constructor(channel, options) {\n    this.channel = channel;\n    this.options = options;\n    this.sharedFilterConfig = {};\n  }\n  createFilter() {\n    return new CompressionFilter(this.options, this.sharedFilterConfig);\n  }\n}\nexports.CompressionFilterFactory = CompressionFilterFactory;","map":{"version":3,"names":["zlib","require","compression_algorithms_1","constants_1","filter_1","logging","isCompressionAlgorithmKey","key","CompressionAlgorithms","CompressionHandler","writeMessage","message","compress","messageBuffer","compressMessage","output","Buffer","allocUnsafe","length","writeUInt8","writeUInt32BE","copy","readMessage","data","compressed","readUInt8","slice","decompressMessage","IdentityHandler","Promise","reject","Error","DeflateHandler","resolve","deflate","err","inflate","GzipHandler","gzip","unzip","UnknownHandler","constructor","compressionName","getCompressionHandler","CompressionFilter","BaseFilter","channelOptions","sharedFilterConfig","sendCompression","receiveCompression","currentCompressionAlgorithm","compressionAlgorithmKey","undefined","clientSelectedEncoding","serverSupportedEncodings","_a","serverSupportedEncodingHeader","split","includes","log","LogVerbosity","ERROR","sendMetadata","metadata","headers","set","remove","receiveMetadata","receiveEncoding","get","encoding","serverSupportedEncodingsHeader","sendMessage","resolvedMessage","flags","receiveMessage","exports","CompressionFilterFactory","channel","options","createFilter"],"sources":["/Users/usmanchaudhry/Documents/GitHub/weather-app/face-recognition/node_modules/@grpc/grpc-js/src/compression-filter.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport * as zlib from 'zlib';\n\nimport { WriteObject, WriteFlags } from './call-interface';\nimport { Channel } from './channel';\nimport { ChannelOptions } from './channel-options';\nimport { CompressionAlgorithms } from './compression-algorithms';\nimport { LogVerbosity } from './constants';\nimport { BaseFilter, Filter, FilterFactory } from './filter';\nimport * as logging from './logging';\nimport { Metadata, MetadataValue } from './metadata';\n\nconst isCompressionAlgorithmKey = (key: number): key is CompressionAlgorithms => {\n  return typeof key === 'number' && typeof CompressionAlgorithms[key] === 'string';\n}\n\ntype CompressionAlgorithm = keyof typeof CompressionAlgorithms;\n\ntype SharedCompressionFilterConfig = {\n  serverSupportedEncodingHeader?: string;\n};\n\nabstract class CompressionHandler {\n  protected abstract compressMessage(message: Buffer): Promise<Buffer>;\n  protected abstract decompressMessage(data: Buffer): Promise<Buffer>;\n  /**\n   * @param message Raw uncompressed message bytes\n   * @param compress Indicates whether the message should be compressed\n   * @return Framed message, compressed if applicable\n   */\n  async writeMessage(message: Buffer, compress: boolean): Promise<Buffer> {\n    let messageBuffer = message;\n    if (compress) {\n      messageBuffer = await this.compressMessage(messageBuffer);\n    }\n    const output = Buffer.allocUnsafe(messageBuffer.length + 5);\n    output.writeUInt8(compress ? 1 : 0, 0);\n    output.writeUInt32BE(messageBuffer.length, 1);\n    messageBuffer.copy(output, 5);\n    return output;\n  }\n  /**\n   * @param data Framed message, possibly compressed\n   * @return Uncompressed message\n   */\n  async readMessage(data: Buffer): Promise<Buffer> {\n    const compressed = data.readUInt8(0) === 1;\n    let messageBuffer = data.slice(5);\n    if (compressed) {\n      messageBuffer = await this.decompressMessage(messageBuffer);\n    }\n    return messageBuffer;\n  }\n}\n\nclass IdentityHandler extends CompressionHandler {\n  async compressMessage(message: Buffer) {\n    return message;\n  }\n\n  async writeMessage(message: Buffer, compress: boolean): Promise<Buffer> {\n    const output = Buffer.allocUnsafe(message.length + 5);\n    /* With \"identity\" compression, messages should always be marked as\n     * uncompressed */\n    output.writeUInt8(0, 0);\n    output.writeUInt32BE(message.length, 1);\n    message.copy(output, 5);\n    return output;\n  }\n\n  decompressMessage(message: Buffer): Promise<Buffer> {\n    return Promise.reject<Buffer>(\n      new Error(\n        'Received compressed message but \"grpc-encoding\" header was identity'\n      )\n    );\n  }\n}\n\nclass DeflateHandler extends CompressionHandler {\n  compressMessage(message: Buffer) {\n    return new Promise<Buffer>((resolve, reject) => {\n      zlib.deflate(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n\n  decompressMessage(message: Buffer) {\n    return new Promise<Buffer>((resolve, reject) => {\n      zlib.inflate(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n}\n\nclass GzipHandler extends CompressionHandler {\n  compressMessage(message: Buffer) {\n    return new Promise<Buffer>((resolve, reject) => {\n      zlib.gzip(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n\n  decompressMessage(message: Buffer) {\n    return new Promise<Buffer>((resolve, reject) => {\n      zlib.unzip(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n}\n\nclass UnknownHandler extends CompressionHandler {\n  constructor(private readonly compressionName: string) {\n    super();\n  }\n  compressMessage(message: Buffer): Promise<Buffer> {\n    return Promise.reject<Buffer>(\n      new Error(\n        `Received message compressed with unsupported compression method ${this.compressionName}`\n      )\n    );\n  }\n\n  decompressMessage(message: Buffer): Promise<Buffer> {\n    // This should be unreachable\n    return Promise.reject<Buffer>(\n      new Error(`Compression method not supported: ${this.compressionName}`)\n    );\n  }\n}\n\nfunction getCompressionHandler(compressionName: string): CompressionHandler {\n  switch (compressionName) {\n    case 'identity':\n      return new IdentityHandler();\n    case 'deflate':\n      return new DeflateHandler();\n    case 'gzip':\n      return new GzipHandler();\n    default:\n      return new UnknownHandler(compressionName);\n  }\n}\n\nexport class CompressionFilter extends BaseFilter implements Filter {\n  private sendCompression: CompressionHandler = new IdentityHandler();\n  private receiveCompression: CompressionHandler = new IdentityHandler();\n  private currentCompressionAlgorithm: CompressionAlgorithm = 'identity';\n\n  constructor(channelOptions: ChannelOptions, private sharedFilterConfig: SharedCompressionFilterConfig) {\n    super();\n\n    const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];\n    if (compressionAlgorithmKey !== undefined) {\n      if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\n        const clientSelectedEncoding = CompressionAlgorithms[compressionAlgorithmKey] as CompressionAlgorithm;\n        const serverSupportedEncodings = sharedFilterConfig.serverSupportedEncodingHeader?.split(',');\n        /**\n         * There are two possible situations here:\n         * 1) We don't have any info yet from the server about what compression it supports\n         *    In that case we should just use what the client tells us to use\n         * 2) We've previously received a response from the server including a grpc-accept-encoding header\n         *    In that case we only want to use the encoding chosen by the client if the server supports it\n         */\n        if (!serverSupportedEncodings || serverSupportedEncodings.includes(clientSelectedEncoding)) {\n          this.currentCompressionAlgorithm = clientSelectedEncoding;\n          this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm);\n        }\n      } else {\n        logging.log(LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\n      }\n    }\n  }\n\n  async sendMetadata(metadata: Promise<Metadata>): Promise<Metadata> {\n    const headers: Metadata = await metadata;\n    headers.set('grpc-accept-encoding', 'identity,deflate,gzip');\n    headers.set('accept-encoding', 'identity');\n\n    // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\n    if (this.currentCompressionAlgorithm === 'identity') {\n      headers.remove('grpc-encoding');\n    } else {\n      headers.set('grpc-encoding', this.currentCompressionAlgorithm);\n    }\n\n    return headers;\n  }\n\n  receiveMetadata(metadata: Metadata): Metadata {\n    const receiveEncoding: MetadataValue[] = metadata.get('grpc-encoding');\n    if (receiveEncoding.length > 0) {\n      const encoding: MetadataValue = receiveEncoding[0];\n      if (typeof encoding === 'string') {\n        this.receiveCompression = getCompressionHandler(encoding);\n      }\n    }\n    metadata.remove('grpc-encoding');\n\n    /* Check to see if the compression we're using to send messages is supported by the server\n     * If not, reset the sendCompression filter and have it use the default IdentityHandler */\n    const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0] as string | undefined;\n    if (serverSupportedEncodingsHeader) {\n      this.sharedFilterConfig.serverSupportedEncodingHeader = serverSupportedEncodingsHeader;\n      const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');\n\n      if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\n        this.sendCompression = new IdentityHandler();\n        this.currentCompressionAlgorithm = 'identity';\n      }\n    }\n    metadata.remove('grpc-accept-encoding');\n    return metadata;\n  }\n\n  async sendMessage(message: Promise<WriteObject>): Promise<WriteObject> {\n    /* This filter is special. The input message is the bare message bytes,\n     * and the output is a framed and possibly compressed message. For this\n     * reason, this filter should be at the bottom of the filter stack */\n    const resolvedMessage: WriteObject = await message;\n    let compress: boolean;\n    if (this.sendCompression instanceof IdentityHandler) {\n      compress = false;\n    } else {\n      compress = ((resolvedMessage.flags ?? 0) & WriteFlags.NoCompress) === 0;\n    }\n\n    return {\n      message: await this.sendCompression.writeMessage(\n        resolvedMessage.message,\n        compress\n      ),\n      flags: resolvedMessage.flags,\n    };\n  }\n\n  async receiveMessage(message: Promise<Buffer>) {\n    /* This filter is also special. The input message is framed and possibly\n     * compressed, and the output message is deframed and uncompressed. So\n     * this is another reason that this filter should be at the bottom of the\n     * filter stack. */\n    return this.receiveCompression.readMessage(await message);\n  }\n}\n\nexport class CompressionFilterFactory\n  implements FilterFactory<CompressionFilter> {\n    private sharedFilterConfig: SharedCompressionFilterConfig = {};\n  constructor(private readonly channel: Channel, private readonly options: ChannelOptions) {}\n  createFilter(): CompressionFilter {\n    return new CompressionFilter(this.options, this.sharedFilterConfig);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}